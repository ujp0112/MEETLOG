<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.CommunityCourseMapper">

	<resultMap id="communityCourseResult"
		type="model.CommunityCourse">
		<id property="id" column="course_id" />
		<result property="courseId" column="course_id" />
		<result property="title" column="title" />
		<result property="description" column="description" />
		<result property="previewImage" column="preview_image" />
		<result property="userId" column="user_id" />
		<result property="author" column="author" />
		<result property="profileImage" column="profile_image" />
		<result property="likes" column="likes" />
		<result property="likeCount" column="likes" />
		<result property="createdAt" column="created_at" />
		<collection property="tags" javaType="java.util.ArrayList"
			select="selectTagsForCourse" column="course_id" />
	</resultMap>

	<select id="selectTagsForCourse" parameterType="int"
		resultType="java.lang.String">
		SELECT t.tag_name
		FROM course_tags ct
		JOIN tags t ON ct.tag_id = t.tag_id
		WHERE ct.course_id = #{course_id}
	</select>

	<select id="selectCommunityCourses" parameterType="map"
		resultMap="communityCourseResult">
		SELECT
		c.course_id, c.title, c.preview_image,
		u.nickname AS author,
		u.profile_image,
		(SELECT COUNT(*) FROM course_likes cl WHERE cl.course_id = c.course_id) AS
		likes
		FROM courses c
		JOIN users u ON c.author_id = u.id
		<where>
			c.type = 'COMMUNITY'
			<if test="query != null and query != ''">
				AND (c.title LIKE CONCAT('%', #{query}, '%') OR c.description LIKE
				CONCAT('%', #{query}, '%'))
			</if>
			<if test="area != null and area != ''">
				AND c.area = #{area}
			</if>
		</where>
		ORDER BY
		c.created_at DESC
		LIMIT #{offset}, #{itemsPerPage}
	</select>

	<select id="countCommunityCourses" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM courses c
		JOIN users u ON c.author_id = u.id
		<where>
			c.type = 'COMMUNITY'
			<if test="query != null and query != ''">
				AND (c.title LIKE CONCAT('%', #{query}, '%') OR c.description LIKE
				CONCAT('%', #{query}, '%'))
			</if>
			<if test="area != null and area != ''">
				AND c.area = #{area}
			</if>
		</where>
	</select>

	<select id="findDetailById" parameterType="int"
		resultMap="communityCourseResult">
		SELECT
		c.course_id, c.title, c.preview_image, c.author_id AS user_id,
		u.nickname AS author,
		u.profile_image,
		(SELECT COUNT(*) FROM course_likes cl WHERE cl.course_id = c.course_id) AS
		likes
		FROM courses c
		LEFT JOIN users u ON c.author_id = u.id
		WHERE c.course_id = #{id}
	</select>

	<select id="findById" parameterType="int"
		resultMap="communityCourseResult">
		SELECT
		c.course_id, c.title, c.description, c.preview_image, c.author_id AS user_id, c.created_at,
		u.nickname AS author,
		u.profile_image,
		(SELECT COUNT(*) FROM course_likes cl WHERE cl.course_id = c.course_id) AS
		likes
		FROM courses c
		LEFT JOIN users u ON c.author_id = u.id
		WHERE c.course_id = #{id}
	</select>

	<select id="findStepsByCourseId" parameterType="int"
		resultType="model.CourseStep">
		SELECT
		step_id AS id,
		step_type AS type,
		emoji,
		name,
		description,
		image,
		time,
		cost,
		latitude,
		longitude,
		address
		FROM course_steps
		WHERE course_id = #{courseId}
		ORDER BY step_order ASC
	</select>

	<!-- 코스 좋아요 관련 쿼리들 -->
	<select id="checkCourseLike" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM course_likes
		WHERE course_id = #{courseId} AND user_id = #{userId}
	</select>

	<insert id="insertCourseLike" parameterType="map">
		INSERT INTO course_likes (course_id, user_id)
		VALUES (#{courseId}, #{userId})
	</insert>

	<delete id="deleteCourseLike" parameterType="map">
		DELETE FROM course_likes
		WHERE course_id = #{courseId} AND user_id = #{userId}
	</delete>

	<select id="getCourseLikeCount" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM course_likes
		WHERE course_id = #{courseId}
	</select>

	<insert id="insertCourse" parameterType="model.CommunityCourse"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO courses (author_id, title, description, preview_image, type)
		VALUES (#{userId}, #{title}, #{description}, #{previewImage}, 'COMMUNITY')
	</insert>

	<update id="updateCourse" parameterType="model.CommunityCourse">
		UPDATE courses
		SET title = #{title},
		    description = #{description},
		    preview_image = #{previewImage}
		WHERE course_id = #{id}
	</update>

	<insert id="insertCourseStep" parameterType="model.CourseStep">
		INSERT INTO course_steps (course_id, step_order, name, step_type, time, cost, latitude, longitude, address)
		VALUES (#{courseId}, #{order}, #{name}, #{type}, #{time}, #{cost}, #{latitude}, #{longitude}, #{address})
	</insert>

	<select id="findByUserId" parameterType="int" resultMap="communityCourseResult">
		SELECT
		c.course_id, c.title, c.preview_image, c.author_id AS user_id, c.created_at,
		u.nickname AS author,
		u.profile_image,
		(SELECT COUNT(*) FROM course_likes cl WHERE cl.course_id = c.course_id) AS likes
		FROM courses c
		LEFT JOIN users u ON c.author_id = u.id
		WHERE c.author_id = #{userId} AND c.type = 'COMMUNITY'
		ORDER BY c.created_at DESC
	</select>

	<delete id="deleteCourse" parameterType="int">
		DELETE FROM courses WHERE course_id = #{courseId}
	</delete>

	<!-- 태그 관련 쿼리 -->
	<select id="findOrCreateTag" parameterType="string" resultType="int">
		<!-- 태그가 있으면 ID 반환, 없으면 INSERT 후 ID 반환 -->
		SELECT tag_id FROM tags WHERE tag_name = #{tagName}
	</select>

	<insert id="insertTag" parameterType="string" useGeneratedKeys="true" keyProperty="tagId">
		INSERT INTO tags (tag_name) VALUES (#{tagName})
	</insert>

	<insert id="insertCourseTag" parameterType="map">
		INSERT INTO course_tags (course_id, tag_id) VALUES (#{courseId}, #{tagId})
	</insert>

	<delete id="deleteCourseTagsByCourseId" parameterType="int">
		DELETE FROM course_tags WHERE course_id = #{courseId}
	</delete>

	<!-- 특정 위치 주변의 커뮤니티 코스를 페이징 처리하여 조회합니다. -->
	<select id="findNearbyCoursesByPage" parameterType="map" resultType="model.CommunityCourse">
		SELECT DISTINCT
			c.course_id AS id,
			c.course_id AS courseId,
			c.title,
			c.description,
			c.preview_image AS previewImage,
			c.created_at AS createdAt,
			u.nickname AS author,
			u.profile_image AS profileImage,
			(SELECT COUNT(*) FROM course_likes cl WHERE cl.course_id = c.course_id) AS likes,
			(SELECT COUNT(*) FROM course_steps cs2 WHERE cs2.course_id = c.course_id) AS restaurantCount,
			MIN((6371 * ACOS(
				COS(RADIANS(#{latitude})) * COS(RADIANS(cs.latitude)) *
				COS(RADIANS(cs.longitude) - RADIANS(#{longitude})) +
				SIN(RADIANS(#{latitude})) * SIN(RADIANS(cs.latitude))
			))) AS distance
		FROM courses c
		LEFT JOIN users u ON c.author_id = u.id
		INNER JOIN course_steps cs ON c.course_id = cs.course_id
		WHERE
			c.type = 'COMMUNITY'
			AND cs.latitude IS NOT NULL AND cs.longitude IS NOT NULL
		GROUP BY c.course_id
		HAVING
			distance &lt;= #{radiusKm}
		ORDER BY
			c.created_at DESC
		LIMIT #{limit}
		OFFSET #{offset}
	</select>

</mapper>