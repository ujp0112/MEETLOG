<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.ReservationDAO">
	<resultMap id="reservationResultMap" type="model.Reservation"
		autoMapping="true">
		<id property="id" column="id" />
		<result property="restaurantId" column="restaurant_id" />
		<result property="userId" column="user_id" />
		<result property="restaurantName" column="restaurant_name" />
		<result property="userName" column="user_name" />
		<result property="reservationTime" column="reservation_time" />
		<result property="partySize" column="party_size" />
		<result property="specialRequests" column="special_requests" />
		<result property="contactPhone" column="contact_phone" />
		<result property="cancelReason" column="cancel_reason" />
		<result property="cancelledAt" column="cancelled_at" />
		<result property="depositRequired" column="deposit_required" />
		<result property="depositAmount" column="deposit_amount" />
		<result property="userCouponId" column="user_coupon_id" />
		<result property="couponDiscountAmount"
			column="coupon_discount_amount" />
		<result property="couponName" column="coupon_name" />
		<result property="couponDiscountType"
			column="coupon_discount_type" />
		<result property="couponIsUsed" column="coupon_is_used" />
		<result property="paymentStatus" column="payment_status" />
		<result property="paymentOrderId" column="payment_order_id" />
		<result property="paymentApprovedAt"
			column="payment_approved_at" />
		<result property="paymentProvider" column="payment_provider" />
		<result property="createdAt" column="created_at" />
		<result property="updatedAt" column="updated_at" />
	</resultMap>

	<resultMap id="reservationStatsResultMap"
		type="service.ReservationService$ReservationStats" autoMapping="true">
		<result property="totalReservations"
			column="total_reservations" />
		<result property="pendingReservations"
			column="pending_reservations" />
		<result property="confirmedReservations"
			column="confirmed_reservations" />
		<result property="cancelledReservations"
			column="cancelled_reservations" />
		<result property="completedReservations"
			column="completed_reservations" />
	</resultMap>

	<!-- 음식점별 예약 목록 조회 -->
	<select id="findByRestaurantId" resultMap="reservationResultMap">
		SELECT
		r.*,
		u.nickname as user_name,
		uc.id as user_coupon_id,
		c.title as coupon_name, c.discount_type as coupon_discount_type,
		uc.is_used as coupon_is_used
		FROM reservations r
		LEFT JOIN users u ON r.user_id = u.id
		LEFT JOIN user_coupons uc ON r.user_coupon_id = uc.id
		LEFT JOIN coupons c ON uc.coupon_id = c.id
		WHERE r.restaurant_id = #{restaurantId}
		ORDER BY r.reservation_time DESC
	</select>

	<!-- 예약 상세 조회 -->
	<select id="findById" parameterType="int"
		resultMap="reservationResultMap">
		SELECT r.*, u.nickname as user_name
		FROM reservations r
		LEFT
		JOIN users u ON r.user_id = u.id
		WHERE r.id = #{reservationId}
	</select>

	<select id="findByPaymentOrderId" parameterType="map"
		resultMap="reservationResultMap">
		SELECT r.*, u.nickname as user_name
		FROM reservations r
		LEFT
		JOIN users u ON r.user_id = u.id
		WHERE r.payment_order_id =
		#{paymentOrderId}
	</select>

	<select id="findByUserId" parameterType="int"
		resultMap="reservationResultMap">
		SELECT * FROM reservations WHERE user_id = #{userId} ORDER
		BY
		reservation_time DESC
	</select>

	<select id="findRecentByUserId" parameterType="map"
		resultMap="reservationResultMap">
		SELECT * FROM reservations
		WHERE user_id = #{userId}
		ORDER BY
		reservation_time DESC
		LIMIT #{limit}
	</select>

	<!-- 오늘 예약 목록 조회 -->
	<select id="findTodayReservations" parameterType="int"
		resultMap="reservationResultMap">
		SELECT r.*, u.nickname as user_name
		FROM reservations r
		LEFT
		JOIN users u ON r.user_id = u.id
		WHERE r.restaurant_id =
		#{restaurantId}
		AND DATE(r.reservation_time) = CURDATE()
		ORDER BY
		r.reservation_time ASC
	</select>

	<!-- 예약 통계 조회 -->
	<select id="getReservationStats" parameterType="int"
		resultMap="reservationStatsResultMap">
		SELECT
		COUNT(*) as total_reservations,
		SUM(CASE WHEN status =
		'PENDING' THEN 1 ELSE 0 END) as pending_reservations,
		SUM(CASE WHEN
		status = 'CONFIRMED' THEN 1 ELSE 0 END) as
		confirmed_reservations,
		SUM(CASE WHEN status = 'CANCELLED' THEN 1 ELSE 0 END) as
		cancelled_reservations,
		SUM(CASE WHEN status = 'COMPLETED' THEN 1 ELSE
		0 END) as
		completed_reservations
		FROM reservations
		WHERE restaurant_id =
		#{restaurantId}
	</select>

	<!-- 고급 검색을 위한 예약 검색 -->
	<select id="searchReservations" parameterType="map"
		resultMap="reservationResultMap">
		SELECT r.*, u.nickname as user_name
		FROM reservations r
		LEFT JOIN users
		u ON r.user_id = u.id
		LEFT JOIN restaurants rest ON r.restaurant_id =
		rest.id
		WHERE 1=1
		<if test="restaurantId != null">
			AND r.restaurant_id = #{restaurantId}
		</if>
		<if test="status != null and status != ''">
			AND r.status = #{status}
		</if>
		<if test="customerName != null and customerName != ''">
			AND u.nickname LIKE CONCAT('%', #{customerName}, '%')
		</if>
		<if test="startDate != null and startDate != ''">
			AND r.reservation_time >= #{startDate}
		</if>
		<if test="endDate != null and endDate != ''">
			AND r.reservation_time &lt;= #{endDate}
		</if>
		ORDER BY r.reservation_time DESC
	</select>

	<!-- 예약 생성 -->
	<insert id="insert" parameterType="model.Reservation"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO reservations (
		restaurant_id, user_id, restaurant_name, user_name, reservation_time,
		party_size, status, special_requests, contact_phone,
		deposit_required,
		deposit_amount, payment_status, payment_order_id, payment_provider,
		payment_approved_at,
		created_at, updated_at)
		VALUES (
		#{restaurantId},
		#{userId}, #{restaurantName}, #{userName}, #{reservationTime},
		#{partySize}, #{status}, #{specialRequests}, #{contactPhone},
		#{depositRequired}, #{depositAmount}, #{paymentStatus},
		#{paymentOrderId}, #{paymentProvider}, #{paymentApprovedAt},
		NOW(),
		NOW())
	</insert>

	<update id="update" parameterType="model.Reservation">
		UPDATE reservations SET
		reservation_time = #{reservationTime},
		party_size = #{partySize},
		status = #{status},
		special_requests = #{specialRequests},
		contact_phone = #{contactPhone},
		updated_at = NOW()
		WHERE id = #{id}
	</update>

	<update id="updateStatus" parameterType="map">
		UPDATE reservations SET
		status = #{status}, updated_at = NOW() WHERE id =
		#{id}
	</update>

	<update id="updateCancellation" parameterType="map">
		UPDATE
		reservations
		SET
		status = #{status},
		cancel_reason = #{cancelReason},
		cancelled_at = #{cancelledAt},
		updated_at = NOW()
		WHERE id = #{id}
	</update>

	<update id="updatePaymentInfo" parameterType="map">
		UPDATE reservations
		SET
		payment_status = #{paymentStatus},
		payment_order_id =
		#{paymentOrderId},
		payment_provider = #{paymentProvider},
		payment_approved_at = #{paymentApprovedAt},
		deposit_amount =
		#{depositAmount},
		deposit_required = #{depositRequired},
		updated_at =
		NOW()
		WHERE id = #{id}
	</update>

	<delete id="delete" parameterType="int">
		DELETE FROM reservations WHERE
		id = #{id}
	</delete>

	<!-- 특정 사업자의 입금 완료된 예약금 총액 조회 -->
	<select id="getTotalDepositByOwnerId" parameterType="int" resultType="java.math.BigDecimal">
		SELECT COALESCE(SUM(r.deposit_amount), 0)
		FROM reservations r
		INNER JOIN restaurants rest ON r.restaurant_id = rest.id
		WHERE rest.owner_id = #{ownerId}
		AND r.payment_status = 'PAID'
		AND r.deposit_required = true
		AND r.status NOT IN ('CANCELLED')
	</select>

</mapper>
