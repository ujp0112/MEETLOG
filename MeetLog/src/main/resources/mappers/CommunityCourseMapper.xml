<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.CommunityCourseMapper">

	<resultMap id="communityCourseResult"
		type="model.CommunityCourse">
		<id property="id" column="course_id" />
		<result property="title" column="title" />
		<result property="previewImage" column="preview_image" />
		<result property="authorName" column="author_name" />
		<result property="profileImage" column="profile_image" />
		<result property="likes" column="likes" />
		<collection property="tags" javaType="java.util.ArrayList"
			select="selectTagsForCourse" column="course_id" />
	</resultMap>

	<select id="selectTagsForCourse" parameterType="int"
		resultType="java.lang.String">
		SELECT t.tag_name
		FROM course_tags ct
		JOIN tags t ON ct.tag_id = t.tag_id
		WHERE ct.course_id = #{course_id}
	</select>

	<select id="selectCommunityCourses" parameterType="map"
		resultMap="communityCourseResult">
		SELECT
		c.course_id, c.title, c.preview_image,
		u.nickname AS author,
		u.profile_image,
		(SELECT COUNT(*) FROM course_likes cl WHERE cl.course_id = c.course_id) AS
		likes
		FROM courses c
		JOIN users u ON c.author_id = u.id
		<where>
			c.type = 'COMMUNITY'
			<if test="query != null and query != ''">
				AND (c.title LIKE CONCAT('%', #{query}, '%') OR c.description LIKE
				CONCAT('%', #{query}, '%'))
			</if>
			<if test="area != null and area != ''">
				AND c.area = #{area}
			</if>
		</where>
		ORDER BY
		c.created_at DESC
		LIMIT #{offset}, #{itemsPerPage}
	</select>

	<select id="countCommunityCourses" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM courses c
		JOIN users u ON c.author_id = u.id
		<where>
			c.type = 'COMMUNITY'
			<if test="query != null and query != ''">
				AND (c.title LIKE CONCAT('%', #{query}, '%') OR c.description LIKE
				CONCAT('%', #{query}, '%'))
			</if>
			<if test="area != null and area != ''">
				AND c.area = #{area}
			</if>
		</where>
	</select>

	<select id="findDetailById" parameterType="int"
		resultMap="communityCourseResult">
		SELECT
		c.course_id, c.title, c.preview_image,
		u.nickname AS author,
		u.profile_image,
		(SELECT COUNT(*) FROM course_likes cl WHERE cl.course_id = c.course_id) AS
		likes
		FROM courses c
		LEFT JOIN users u ON c.author_id = u.id
		WHERE c.course_id = #{id}
	</select>

	<select id="findStepsByCourseId" parameterType="int"
		resultType="model.CourseStep">
		SELECT
		step_id AS id,
		step_type AS type,
		emoji,
		name,
		description,
		image
		FROM course_steps
		WHERE course_id = #{courseId}
		ORDER BY step_order ASC
	</select>

	<insert id="insertCourse" parameterType="model.CommunityCourse"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO courses (author_id, title, preview_image, type)
		VALUES (#{userId}, #{title}, #{previewImage}, 'COMMUNITY')
	</insert>

	<insert id="insertCourseStep" parameterType="model.CourseStep">
		INSERT INTO course_steps (course_id, step_order, name, type, time, cost)
		VALUES (#{courseId}, #{order}, #{name}, #{type}, #{time}, #{cost})
	</insert>

</mapper>