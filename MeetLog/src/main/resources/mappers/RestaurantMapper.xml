<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="restaurant">
    <resultMap id="restaurantResultMap" type="Restaurant" autoMapping="true">
        <id property="id" column="id" />
        <result property="ownerId" column="owner_id" />
        <result property="name" column="name" />
        <result property="category" column="category" />
        <result property="location" column="location" />
        <result property="address" column="address" />
        <result property="phone" column="phone" />
        <result property="description" column="description" />
        <result property="image" column="image" />
        <result property="imageUrl" column="image" />
        <result property="isActive" column="is_active" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
    </resultMap>

    <!-- 모든 음식점 조회 -->
    <select id="findAll" resultMap="restaurantResultMap">
        SELECT * FROM restaurants 
        WHERE is_active = true 
        ORDER BY created_at DESC
    </select>

    <!-- ID로 음식점 조회 -->
    <select id="findById" parameterType="int" resultMap="restaurantResultMap">
        SELECT * FROM restaurants 
        WHERE id = #{id} AND is_active = true
    </select>

    <!-- 카테고리로 음식점 조회 -->
    <select id="findByCategory" parameterType="String" resultMap="restaurantResultMap">
        SELECT * FROM restaurants 
        WHERE category = #{category} AND is_active = true 
        ORDER BY created_at DESC
    </select>

    <!-- 위치로 음식점 조회 -->
    <select id="findByLocation" parameterType="String" resultMap="restaurantResultMap">
        SELECT * FROM restaurants 
        WHERE location = #{location} AND is_active = true 
        ORDER BY created_at DESC
    </select>

    <!-- 사업자별 레스토랑 조회 -->
    <select id="findByOwnerId" parameterType="int" resultMap="restaurantResultMap">
        SELECT * FROM restaurants 
        WHERE owner_id = #{ownerId} AND is_active = true
        ORDER BY created_at DESC
    </select>

    <!-- 사업자별 레스토랑 요약 정보 조회 (경량 DTO) -->
    <select id="findSummariesByOwnerId" parameterType="int" resultType="RestaurantSummaryDTO">
        SELECT 
            r.id,
            r.name,
            r.category,
            r.location,
            r.address,
            r.phone,
            r.image_url as imageUrl,
            COALESCE(AVG(reviews.rating), 0) as rating,
            COUNT(reviews.id) as reviewCount
        FROM restaurants r
        LEFT JOIN reviews ON r.id = reviews.restaurant_id
        WHERE r.owner_id = #{ownerId} AND r.is_active = true
        GROUP BY r.id, r.name, r.category, r.location, r.address, r.phone, r.image_url
        ORDER BY r.created_at DESC
    </select>

    <!-- 음식점 추가 -->
    <insert id="insert" parameterType="Restaurant" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO restaurants (
            owner_id, name, category, location, address, phone, 
            description, image, is_active, created_at, updated_at
        ) VALUES (
            #{ownerId}, #{name}, #{category}, #{location}, #{address}, #{phone},
            #{description}, #{imageUrl}, #{isActive}, NOW(), NOW()
        )
    </insert>

    <!-- 음식점 수정 -->
    <update id="update" parameterType="Restaurant">
        UPDATE restaurants SET
            name = #{name},
            category = #{category},
            location = #{location},
            address = #{address},
            phone = #{phone},
            description = #{description},
            image = #{imageUrl},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 음식점 삭제 (소프트 삭제) -->
    <update id="delete" parameterType="int">
        UPDATE restaurants SET
            is_active = false,
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 고급 검색을 위한 음식점 검색 -->
    <select id="searchRestaurants" resultMap="restaurantResultMap">
        SELECT * FROM restaurants 
        WHERE is_active = true
        <if test="category != null and category != ''">
            AND category = #{category}
        </if>
        <if test="location != null and location != ''">
            AND location = #{location}
        </if>
        <if test="name != null and name != ''">
            AND name LIKE CONCAT('%', #{name}, '%')
        </if>
        <if test="minRating != null">
            AND id IN (
                SELECT restaurant_id FROM reviews 
                GROUP BY restaurant_id 
                HAVING AVG(rating) >= #{minRating}
            )
        </if>
        ORDER BY created_at DESC
    </select>

    <!-- 인기 음식점 조회 (리뷰 수 기준) -->
    <select id="findTopRestaurants" parameterType="int" resultMap="restaurantResultMap">
        SELECT r.*, COUNT(reviews.id) as review_count
        FROM restaurants r
        LEFT JOIN reviews ON r.id = reviews.restaurant_id AND reviews.is_active = true
        WHERE r.is_active = true
        GROUP BY r.id
        ORDER BY review_count DESC, r.created_at DESC
        LIMIT #{limit}
    </select>
</mapper>