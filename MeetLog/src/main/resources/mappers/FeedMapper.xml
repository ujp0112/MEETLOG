<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dao.FeedDAO">

    <!-- 피드 아이템 생성 (기존 복잡한 스키마용) -->
    <insert id="createFeedItem" parameterType="model.FeedItem" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO feed_items (user_id, user_nickname, user_profile_image, action_type, content, 
                               target_type, target_id, target_name, target_image, created_at, is_active)
        VALUES (#{userId}, #{userNickname}, #{userProfileImage}, #{actionType}, #{content},
                #{targetType}, #{targetId}, #{targetName}, #{targetImage}, NOW(), true)
    </insert>

    <!-- 간단한 피드 아이템 생성 (현재 DB 스키마용) -->
    <insert id="createSimpleFeedItem" parameterType="map">
        INSERT INTO feed_items (user_id, feed_type, content_id, is_active, created_at)
        VALUES (#{userId}, #{feedType}, #{contentId}, true, NOW())
    </insert>

    <!-- 사용자의 피드 조회 (팔로우한 사용자들의 활동) - 현재 DB 스키마용 -->
    <select id="getUserFeed" parameterType="map" resultType="map">
        SELECT fi.feed_id as id, fi.user_id as userId, fi.feed_type as actionType, 
               fi.content_id as targetId, fi.created_at as createdAt,
               u.nickname as userNickname, u.profile_image as userProfileImage,
               CASE 
                   WHEN fi.feed_type = 'REVIEW' THEN r.restaurant_id
                   ELSE NULL 
               END as contentLocation,
               CASE 
                   WHEN fi.feed_type = 'REVIEW' THEN rest.name
                   ELSE NULL 
               END as restaurantName
        FROM feed_items fi
        JOIN follows f ON fi.user_id = f.following_id
        JOIN users u ON fi.user_id = u.id
        LEFT JOIN reviews r ON fi.feed_type = 'REVIEW' AND fi.content_id = r.id
        LEFT JOIN restaurants rest ON r.restaurant_id = rest.id
        WHERE f.follower_id = #{userId}
        AND f.is_active = true
        AND fi.is_active = true
        ORDER BY fi.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 특정 사용자의 활동 피드 조회 - 현재 DB 스키마용 -->
    <select id="getUserActivityFeed" parameterType="map" resultType="map">
        SELECT fi.feed_id as id, fi.user_id as userId, fi.feed_type as actionType, 
               fi.content_id as targetId, fi.created_at as createdAt,
               u.nickname as userNickname, u.profile_image as userProfileImage,
               CASE 
                   WHEN fi.feed_type = 'REVIEW' THEN r.restaurant_id
                   ELSE NULL 
               END as contentLocation,
               CASE 
                   WHEN fi.feed_type = 'REVIEW' THEN rest.name
                   ELSE NULL 
               END as restaurantName
        FROM feed_items fi
        JOIN users u ON fi.user_id = u.id
        LEFT JOIN reviews r ON fi.feed_type = 'REVIEW' AND fi.content_id = r.id
        LEFT JOIN restaurants rest ON r.restaurant_id = rest.id
        WHERE fi.user_id = #{userId}
        AND fi.is_active = true
        ORDER BY fi.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 전체 공개 피드 조회 (인기 활동) - 현재 DB 스키마용 -->
    <select id="getPublicFeed" parameterType="map" resultType="map">
        SELECT fi.feed_id as id, fi.user_id as userId, fi.feed_type as actionType, 
               fi.content_id as targetId, fi.created_at as createdAt,
               u.nickname as userNickname, u.profile_image as userProfileImage,
               CASE 
                   WHEN fi.feed_type = 'REVIEW' THEN r.restaurant_id
                   ELSE NULL 
               END as contentLocation,
               CASE 
                   WHEN fi.feed_type = 'REVIEW' THEN rest.name
                   ELSE NULL 
               END as restaurantName
        FROM feed_items fi
        JOIN users u ON fi.user_id = u.id
        LEFT JOIN reviews r ON fi.feed_type = 'REVIEW' AND fi.content_id = r.id
        LEFT JOIN restaurants rest ON r.restaurant_id = rest.id
        WHERE fi.is_active = true
        AND u.is_active = true
        ORDER BY fi.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 피드 아이템 삭제 -->
    <update id="deleteFeedItem" parameterType="int">
        UPDATE feed_items 
        SET is_active = false
        WHERE feed_id = #{feedItemId}
    </update>

    <!-- 사용자별 피드 아이템 수 조회 -->
    <select id="getUserFeedCount" parameterType="int" resultType="int">
        SELECT COUNT(*) 
        FROM feed_items 
        WHERE user_id = #{userId}
        AND is_active = true
    </select>

    <!-- 팔로우한 사용자들의 최근 활동 조회 -->
    <select id="getFollowingActivity" parameterType="map" resultType="map">
        SELECT fi.feed_id as id, fi.user_id as userId, fi.feed_type as actionType,
               fi.content_id as targetId, fi.created_at as createdAt,
               u.nickname as userNickname, u.profile_image as userProfileImage
        FROM feed_items fi
        JOIN follows f ON fi.user_id = f.following_id
        JOIN users u ON fi.user_id = u.id
        WHERE f.follower_id = #{userId}
        AND f.is_active = true
        AND fi.is_active = true
        ORDER BY fi.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 메인 피드 조회 (자신의 활동 + 팔로우한 사용자들의 활동) -->
    <select id="getMainFeed" parameterType="map" resultType="map">
        SELECT fi.feed_id as id, fi.user_id as userId, fi.feed_type as actionType,
               fi.content_id as targetId, fi.created_at as createdAt,
               u.nickname as userNickname, u.profile_image as userProfileImage,
               CASE
                   WHEN fi.feed_type = 'REVIEW' THEN r.restaurant_id
                   ELSE NULL
               END as contentLocation,
               CASE
                   WHEN fi.feed_type = 'REVIEW' THEN rest.name
                   ELSE NULL
               END as restaurantName
        FROM feed_items fi
        JOIN users u ON fi.user_id = u.id
        LEFT JOIN reviews r ON fi.feed_type = 'REVIEW' AND fi.content_id = r.id
        LEFT JOIN restaurants rest ON r.restaurant_id = rest.id
        WHERE (
            fi.user_id = #{userId} OR
            fi.user_id IN (
                SELECT f.following_id
                FROM follows f
                WHERE f.follower_id = #{userId} AND f.is_active = true
            )
        )
        AND fi.is_active = true
        AND u.is_active = true
        ORDER BY fi.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

</mapper>
