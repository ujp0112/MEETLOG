<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dao.CourseCommentDAO">

    <resultMap id="CourseCommentResultMap" type="model.CourseComment">
        <!-- [수정] like_count 매핑 추가 -->
        <id property="id" column="comment_id" />
        <result property="courseId" column="course_id" />
        <result property="userId" column="user_id" />
        <result property="content" column="content" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="active" column="is_active" />
        <result property="nickname" column="nickname" />
        <result property="profileImage" column="profile_image" />
        <result property="likeCount" column="like_count" />
    </resultMap>

    <select id="findByCourseId" parameterType="int" resultMap="CourseCommentResultMap">
        SELECT cc.comment_id,
               cc.course_id,
               cc.user_id,
               cc.content,
               cc.created_at,
               cc.updated_at,
               cc.is_active,
               cc.like_count,
               u.nickname,
               u.profile_image
        FROM course_comments cc
        JOIN users u ON cc.user_id = u.id
        WHERE cc.course_id = #{courseId}
          AND cc.is_active = TRUE
        ORDER BY cc.created_at DESC
    </select>

    <select id="findById" parameterType="int" resultMap="CourseCommentResultMap">
        SELECT cc.comment_id,
               cc.course_id,
               cc.user_id,
               cc.content,
               cc.created_at,
               cc.updated_at,
               cc.is_active,
               cc.like_count,
               u.nickname,
               u.profile_image
        FROM course_comments cc
        JOIN users u ON cc.user_id = u.id
        WHERE cc.comment_id = #{commentId}
    </select>

    <insert id="insert" parameterType="model.CourseComment" useGeneratedKeys="true" keyProperty="id" keyColumn="comment_id">
        INSERT INTO course_comments (course_id, user_id, content)
        VALUES (#{courseId}, #{userId}, #{content})
    </insert>

    <update id="softDelete" parameterType="map">
        UPDATE course_comments
        SET is_active = FALSE,
            updated_at = NOW()
        WHERE comment_id = #{commentId}
          AND user_id = #{userId}
    </update>

    <update id="update" parameterType="map">
        UPDATE course_comments
        SET content = #{content},
            updated_at = NOW()
        WHERE comment_id = #{commentId}
          AND user_id = #{userId}
          AND is_active = TRUE
    </update>

    <!-- [수정] 댓글 좋아요 수 증가 -->
    <update id="incrementLikes" parameterType="int">
        UPDATE course_comments SET like_count = COALESCE(like_count, 0) + 1 WHERE comment_id = #{commentId}
    </update>

    <!-- [수정] 댓글 좋아요 수 감소 -->
    <update id="decrementLikes" parameterType="int">
        UPDATE course_comments SET like_count = GREATEST(COALESCE(like_count, 1) - 1, 0) WHERE comment_id = #{commentId}
    </update>
     <!-- [수정] 특정 댓글의 현재 좋아요 수 조회 -->
    <select id="getLikeCount" parameterType="int" resultType="int">
        SELECT COALESCE(like_count, 0)
        FROM course_comments
        WHERE comment_id = #{commentId}
    </select>
</mapper>
