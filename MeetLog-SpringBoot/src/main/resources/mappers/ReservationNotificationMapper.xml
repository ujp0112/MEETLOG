<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ReservationNotificationMapper">

    <!-- Result Map -->
    <resultMap id="ReservationNotificationResultMap" type="model.ReservationNotification">
        <id property="id" column="id"/>
        <result property="reservationId" column="reservation_id"/>
        <result property="notificationTypeString" column="notification_type"/>
        <result property="recipient" column="recipient"/>
        <result property="message" column="message"/>
        <result property="statusString" column="status"/>
        <result property="sentAt" column="sent_at"/>
        <result property="createdAt" column="created_at"/>
        <result property="restaurantName" column="restaurant_name"/>
        <result property="customerName" column="customer_name"/>
        <result property="reservationTime" column="reservation_time"/>
    </resultMap>

    <!-- 특정 예약의 알림 목록 조회 -->
    <select id="findByReservationId" parameterType="int" resultMap="ReservationNotificationResultMap">
        SELECT rn.*, r.restaurant_name, r.user_name AS customer_name, r.reservation_time
        FROM reservation_notifications rn
        INNER JOIN reservations r ON rn.reservation_id = r.id
        WHERE rn.reservation_id = #{reservationId}
        ORDER BY rn.created_at DESC
    </select>

    <!-- 알림 상태별 목록 조회 -->
    <select id="findByStatus" parameterType="string" resultMap="ReservationNotificationResultMap">
        SELECT rn.*, r.restaurant_name, r.user_name AS customer_name, r.reservation_time
        FROM reservation_notifications rn
        INNER JOIN reservations r ON rn.reservation_id = r.id
        WHERE rn.status = #{status}
        ORDER BY rn.created_at DESC
    </select>

    <!-- 발송 대기 중인 알림 목록 조회 -->
    <select id="findPendingNotifications" resultMap="ReservationNotificationResultMap">
        SELECT rn.*, r.restaurant_name, r.user_name AS customer_name, r.reservation_time
        FROM reservation_notifications rn
        INNER JOIN reservations r ON rn.reservation_id = r.id
        WHERE rn.status = 'PENDING'
        ORDER BY rn.created_at ASC
    </select>

    <!-- 특정 기간의 알림 목록 조회 -->
    <select id="findByDateRange" parameterType="map" resultMap="ReservationNotificationResultMap">
        SELECT rn.*, r.restaurant_name, r.user_name AS customer_name, r.reservation_time
        FROM reservation_notifications rn
        INNER JOIN reservations r ON rn.reservation_id = r.id
        WHERE rn.created_at BETWEEN #{startDate} AND #{endDate}
        ORDER BY rn.created_at DESC
    </select>

    <!-- 알림 유형별 목록 조회 -->
    <select id="findByNotificationType" parameterType="string" resultMap="ReservationNotificationResultMap">
        SELECT rn.*, r.restaurant_name, r.user_name AS customer_name, r.reservation_time
        FROM reservation_notifications rn
        INNER JOIN reservations r ON rn.reservation_id = r.id
        WHERE rn.notification_type = #{notificationType}
        ORDER BY rn.created_at DESC
    </select>

    <!-- 특정 수신자의 알림 목록 조회 -->
    <select id="findByRecipient" parameterType="string" resultMap="ReservationNotificationResultMap">
        SELECT rn.*, r.restaurant_name, r.user_name AS customer_name, r.reservation_time
        FROM reservation_notifications rn
        INNER JOIN reservations r ON rn.reservation_id = r.id
        WHERE rn.recipient = #{recipient}
        ORDER BY rn.created_at DESC
    </select>

    <!-- ID로 알림 조회 -->
    <select id="findById" parameterType="int" resultMap="ReservationNotificationResultMap">
        SELECT rn.*, r.restaurant_name, r.user_name AS customer_name, r.reservation_time
        FROM reservation_notifications rn
        INNER JOIN reservations r ON rn.reservation_id = r.id
        WHERE rn.id = #{id}
    </select>

    <!-- 알림 추가 -->
    <insert id="insert" parameterType="model.ReservationNotification" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO reservation_notifications (
            reservation_id,
            notification_type,
            recipient,
            message,
            status,
            created_at
        ) VALUES (
            #{reservationId},
            #{notificationTypeString},
            #{recipient},
            #{message},
            #{statusString},
            NOW()
        )
    </insert>

    <!-- 알림 상태 업데이트 -->
    <update id="updateStatus" parameterType="map">
        UPDATE reservation_notifications
        SET status = #{status}
        <if test="sentAt != null">
            , sent_at = #{sentAt}
        </if>
        WHERE id = #{id}
    </update>

    <!-- 알림 삭제 -->
    <delete id="delete" parameterType="int">
        DELETE FROM reservation_notifications
        WHERE id = #{id}
    </delete>

    <!-- 오래된 알림 정리 -->
    <delete id="cleanupOldNotifications" parameterType="map">
        DELETE FROM reservation_notifications
        WHERE created_at &lt; #{cutoffDate}
        AND status IN ('SENT', 'FAILED')
    </delete>

    <!-- 알림 발송 통계 조회 -->
    <select id="getNotificationStats" resultType="map">
        SELECT
            COUNT(*) AS total_notifications,
            COUNT(CASE WHEN status = 'PENDING' THEN 1 END) AS pending_notifications,
            COUNT(CASE WHEN status = 'SENT' THEN 1 END) AS sent_notifications,
            COUNT(CASE WHEN status = 'FAILED' THEN 1 END) AS failed_notifications,
            ROUND(COUNT(CASE WHEN status = 'SENT' THEN 1 END) * 100.0 / COUNT(*), 2) AS success_rate
        FROM reservation_notifications
    </select>

    <!-- 특정 기간의 알림 발송 성공률 조회 -->
    <select id="getSuccessRateByDateRange" parameterType="map" resultType="map">
        SELECT
            COUNT(*) AS total_notifications,
            COUNT(CASE WHEN status = 'SENT' THEN 1 END) AS sent_notifications,
            COUNT(CASE WHEN status = 'FAILED' THEN 1 END) AS failed_notifications,
            ROUND(COUNT(CASE WHEN status = 'SENT' THEN 1 END) * 100.0 / COUNT(*), 2) AS success_rate
        FROM reservation_notifications
        WHERE created_at BETWEEN #{startDate} AND #{endDate}
    </select>

    <!-- 알림 유형별 발송 통계 조회 -->
    <select id="getStatsByNotificationType" resultType="map">
        SELECT
            notification_type,
            COUNT(*) AS total_count,
            COUNT(CASE WHEN status = 'SENT' THEN 1 END) AS sent_count,
            COUNT(CASE WHEN status = 'FAILED' THEN 1 END) AS failed_count,
            ROUND(COUNT(CASE WHEN status = 'SENT' THEN 1 END) * 100.0 / COUNT(*), 2) AS success_rate
        FROM reservation_notifications
        GROUP BY notification_type
        ORDER BY notification_type
    </select>

    <!-- 실패한 알림 재발송 대상 조회 -->
    <select id="findFailedNotificationsForRetry" parameterType="map" resultMap="ReservationNotificationResultMap">
        SELECT rn.*, r.restaurant_name, r.user_name AS customer_name, r.reservation_time
        FROM reservation_notifications rn
        INNER JOIN reservations r ON rn.reservation_id = r.id
        WHERE rn.status = 'FAILED'
        AND rn.created_at &lt;= #{retryAfter}
        ORDER BY rn.created_at ASC
    </select>

    <!-- 특정 예약의 최근 알림 발송 여부 확인 -->
    <select id="countRecentNotifications" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM reservation_notifications
        WHERE reservation_id = #{reservationId}
        AND notification_type = #{notificationType}
        AND created_at >= #{since}
        AND status IN ('PENDING', 'SENT')
    </select>

</mapper>