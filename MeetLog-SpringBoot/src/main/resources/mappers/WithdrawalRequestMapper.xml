<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dao.WithdrawalRequestDAO">

    <!-- Result Map -->
    <resultMap id="WithdrawalRequestMap" type="model.WithdrawalRequest">
        <id property="id" column="id"/>
        <result property="ownerId" column="owner_id"/>
        <result property="restaurantId" column="restaurant_id"/>
        <result property="requestAmount" column="request_amount"/>
        <result property="availableAmount" column="available_amount"/>
        <result property="bankName" column="bank_name"/>
        <result property="accountNumber" column="account_number"/>
        <result property="accountHolder" column="account_holder"/>
        <result property="status" column="status"/>
        <result property="adminId" column="admin_id"/>
        <result property="adminMemo" column="admin_memo"/>
        <result property="processedAt" column="processed_at"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <!-- 조인된 정보 -->
        <result property="ownerName" column="owner_name"/>
        <result property="ownerEmail" column="owner_email"/>
        <result property="restaurantName" column="restaurant_name"/>
        <result property="adminName" column="admin_name"/>
    </resultMap>

    <!-- 새로운 출금 신청 생성 -->
    <insert id="insert" parameterType="model.WithdrawalRequest" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO withdrawal_requests (
            owner_id,
            restaurant_id,
            request_amount,
            available_amount,
            bank_name,
            account_number,
            account_holder,
            status,
            created_at,
            updated_at
        ) VALUES (
            #{ownerId},
            #{restaurantId},
            #{requestAmount},
            #{availableAmount},
            #{bankName},
            #{accountNumber},
            #{accountHolder},
            #{status},
            NOW(),
            NOW()
        )
    </insert>

    <!-- ID로 출금 신청 조회 -->
    <select id="findById" parameterType="int" resultMap="WithdrawalRequestMap">
        SELECT
            wr.*,
            u.name AS owner_name,
            u.email AS owner_email,
            r.name AS restaurant_name,
            a.name AS admin_name
        FROM withdrawal_requests wr
        LEFT JOIN users u ON wr.owner_id = u.id
        LEFT JOIN restaurants r ON wr.restaurant_id = r.id
        LEFT JOIN users a ON wr.admin_id = a.id
        WHERE wr.id = #{id}
    </select>

    <!-- 특정 사업자의 모든 출금 신청 조회 -->
    <select id="findByOwnerId" parameterType="int" resultMap="WithdrawalRequestMap">
        SELECT
            wr.*,
            u.name AS owner_name,
            u.email AS owner_email,
            r.name AS restaurant_name,
            a.name AS admin_name
        FROM withdrawal_requests wr
        LEFT JOIN users u ON wr.owner_id = u.id
        LEFT JOIN restaurants r ON wr.restaurant_id = r.id
        LEFT JOIN users a ON wr.admin_id = a.id
        WHERE wr.owner_id = #{ownerId}
        ORDER BY wr.created_at DESC
    </select>

    <!-- 특정 상태의 출금 신청 조회 -->
    <select id="findByStatus" parameterType="string" resultMap="WithdrawalRequestMap">
        SELECT
            wr.*,
            u.name AS owner_name,
            u.email AS owner_email,
            r.name AS restaurant_name,
            a.name AS admin_name
        FROM withdrawal_requests wr
        LEFT JOIN users u ON wr.owner_id = u.id
        LEFT JOIN restaurants r ON wr.restaurant_id = r.id
        LEFT JOIN users a ON wr.admin_id = a.id
        WHERE wr.status = #{status}
        ORDER BY wr.created_at DESC
    </select>

    <!-- 모든 출금 신청 조회 (관리자용, 최신순) -->
    <select id="findAll" resultMap="WithdrawalRequestMap">
        SELECT
            wr.*,
            u.name AS owner_name,
            u.email AS owner_email,
            r.name AS restaurant_name,
            a.name AS admin_name
        FROM withdrawal_requests wr
        LEFT JOIN users u ON wr.owner_id = u.id
        LEFT JOIN restaurants r ON wr.restaurant_id = r.id
        LEFT JOIN users a ON wr.admin_id = a.id
        ORDER BY wr.created_at DESC
    </select>

    <!-- 출금 신청 상태 업데이트 -->
    <update id="updateStatus" parameterType="map">
        UPDATE withdrawal_requests
        SET
            status = #{status},
            admin_id = #{adminId},
            admin_memo = #{adminMemo},
            processed_at = NOW(),
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 출금 신청 삭제 -->
    <delete id="delete" parameterType="int">
        DELETE FROM withdrawal_requests
        WHERE id = #{id}
    </delete>

    <!-- 특정 사업자의 대기 중인 출금 신청 개수 조회 -->
    <select id="countPendingByOwnerId" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM withdrawal_requests
        WHERE owner_id = #{ownerId} AND status = 'PENDING'
    </select>

    <!-- 특정 사업자의 승인된 출금 총액 조회 -->
    <select id="getTotalApprovedAmountByOwnerId" parameterType="int" resultType="java.math.BigDecimal">
        SELECT COALESCE(SUM(request_amount), 0)
        FROM withdrawal_requests
        WHERE owner_id = #{ownerId} AND status IN ('APPROVED', 'COMPLETED')
    </select>

    <!-- 특정 사업자의 대기 중인 출금 총액 조회 -->
    <select id="getTotalPendingAmountByOwnerId" parameterType="int" resultType="java.math.BigDecimal">
        SELECT COALESCE(SUM(request_amount), 0)
        FROM withdrawal_requests
        WHERE owner_id = #{ownerId} AND status = 'PENDING'
    </select>

    <!-- 페이징된 출금 신청 목록 조회 (관리자용) -->
    <select id="findAllWithPaging" parameterType="map" resultMap="WithdrawalRequestMap">
        SELECT
            wr.*,
            u.name AS owner_name,
            u.email AS owner_email,
            r.name AS restaurant_name,
            a.name AS admin_name
        FROM withdrawal_requests wr
        LEFT JOIN users u ON wr.owner_id = u.id
        LEFT JOIN restaurants r ON wr.restaurant_id = r.id
        LEFT JOIN users a ON wr.admin_id = a.id
        <where>
            <if test="status != null and status != ''">
                AND wr.status = #{status}
            </if>
            <if test="ownerId != null">
                AND wr.owner_id = #{ownerId}
            </if>
            <if test="restaurantId != null">
                AND wr.restaurant_id = #{restaurantId}
            </if>
        </where>
        ORDER BY wr.created_at DESC
        <if test="limit != null and offset != null">
            LIMIT #{limit} OFFSET #{offset}
        </if>
    </select>

    <!-- 전체 출금 신청 개수 조회 (필터링 포함) -->
    <select id="countAll" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM withdrawal_requests wr
        <where>
            <if test="status != null and status != ''">
                AND wr.status = #{status}
            </if>
            <if test="ownerId != null">
                AND wr.owner_id = #{ownerId}
            </if>
            <if test="restaurantId != null">
                AND wr.restaurant_id = #{restaurantId}
            </if>
        </where>
    </select>

</mapper>
