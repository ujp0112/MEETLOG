<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dao.ReviewCommentDAO">

    <!-- 댓글 생성 -->
    <insert id="createComment" parameterType="model.ReviewComment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO review_comments (review_id, user_id, author, author_image, content, parent_id, 
                                   like_count, created_at, updated_at, is_active)
        VALUES (#{reviewId}, #{userId}, #{author}, #{authorImage}, #{content}, #{parentId},
                #{likeCount}, NOW(), NOW(), true)
    </insert>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="model.ReviewComment">
        UPDATE review_comments
        <set>
            <if test="content != null">content = #{content},</if>
            <if test="likeCount != null">like_count = #{likeCount},</if>
            updated_at = NOW()
        </set>
        WHERE id = #{id}
    </update>

    <!-- 댓글 삭제 -->
    <update id="deleteComment" parameterType="int">
        UPDATE review_comments 
        SET is_active = false, updated_at = NOW()
        WHERE id = #{commentId}
    </update>

    <!-- 리뷰의 댓글 목록 조회 (계층 구조) -->
    <select id="getCommentsByReviewId" parameterType="int" resultType="model.ReviewComment">
        SELECT * FROM review_comments
        WHERE review_id = #{reviewId}
        AND is_active = true
        ORDER BY 
            CASE WHEN parent_id IS NULL OR parent_id = 0 THEN id ELSE parent_id END,
            parent_id,
            created_at ASC
    </select>

    <!-- 사용자의 댓글 목록 조회 -->
    <select id="getCommentsByUserId" parameterType="map" resultType="model.ReviewComment">
        SELECT * FROM review_comments
        WHERE user_id = #{userId}
        AND is_active = true
        ORDER BY created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 댓글 상세 조회 -->
    <select id="getCommentById" parameterType="int" resultType="model.ReviewComment">
        SELECT * FROM review_comments
        WHERE id = #{commentId}
        AND is_active = true
    </select>

    <!-- 댓글 좋아요 -->
    <insert id="likeComment" parameterType="map">
        INSERT INTO review_comment_likes (comment_id, user_id, created_at)
        VALUES (#{commentId}, #{userId}, NOW())
        ON DUPLICATE KEY UPDATE created_at = NOW()
    </insert>

    <!-- 댓글 좋아요 취소 -->
    <delete id="unlikeComment" parameterType="map">
        DELETE FROM review_comment_likes
        WHERE comment_id = #{commentId}
        AND user_id = #{userId}
    </delete>

    <!-- 댓글 좋아요 여부 확인 -->
    <select id="isCommentLiked" parameterType="map" resultType="int">
        SELECT COUNT(*) 
        FROM review_comment_likes 
        WHERE comment_id = #{commentId}
        AND user_id = #{userId}
    </select>

    <!-- 댓글 수 조회 -->
    <select id="getCommentCount" parameterType="int" resultType="int">
        SELECT COUNT(*) 
        FROM review_comments 
        WHERE review_id = #{reviewId}
        AND is_active = true
    </select>

</mapper>
